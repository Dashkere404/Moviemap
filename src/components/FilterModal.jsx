import { useEffect } from 'react';
import styles from './FilterModal.module.css';
import { logEvent } from '../logger'; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

export default function FilterModal({ isOpen, onClose, title, children, onApply, onReset }) {
  const modalRef = useRef(null);

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (isOpen) {
      logEvent('modal_opened', { modalTitle: title }); // üîπ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
      document.body.style.overflow = 'hidden';
    } else {
      logEvent('modal_closed', { modalTitle: title }); // üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
      document.body.style.overflow = 'auto';
    }

    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        logEvent('modal_closed_by_click_outside', { modalTitle: title }); // üîπ –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.body.style.overflow = 'auto';
    };
  }, [isOpen, onClose, title]);

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å–∏—Ç—å"
  const handleReset = () => {
    logEvent('filter_reset', { modalTitle: title }); // üîπ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    onReset();
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
  const handleApply = () => {
    logEvent('filter_applied', { modalTitle: title }); // üîπ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    onApply();
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —á–µ—Ä–µ–∑ –∫—Ä–µ—Å—Ç–∏–∫
  const handleClose = () => {
    logEvent('modal_closed_by_button', { modalTitle: title }); // üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–æ–π √ó
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modal} ref={modalRef}>
        <div className={styles.modalHeader}>
          <h2 className={styles.modalTitle}>{title}</h2>
          <button className={styles.closeButton} onClick={handleClose}>
            &times;
          </button>
        </div>
        <div className={styles.modalContent}>
          {children}
        </div>
        <div className={styles.modalFooter}>
          <button className={styles.resetButton} onClick={handleReset}>
            –°–±—Ä–æ—Å–∏—Ç—å
          </button>
          <button className={styles.applyButton} onClick={handleApply}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
}